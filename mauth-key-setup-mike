this is not on knowledgebase as deemed a security leak to publish

Adding App's public key and uuid to MAuth for testing
1) Go to http://medistrano.imedidata.net/projects/52/stages/136, and SSH into sandbox server
sudo su - medidata
2) cd /mnt/app/current
3) RAILS_ENV=production bundle exec rails console
Steps 4-5 are to be executed in rails console
4) SecurityToken.find_by_app_uuid!("70f3841a-4868-11e1-9826-a4b197fffe70").destroy!
   // This removes any existing SecurityToken with your app
   // If S3 Storage error is display, means no such SecurityToken exists, this is an ignorable error
5) SecurityToken.create!(:app_name => "enter_app_name", :app_uuid => "enter_app_uuid", :public_key_str => "enter public key, as single line  with \n")
6) Before you exit make sure a valid SecurityToken entry has been created for your app.
SecurityToken.find_by_app_uuid!("70f3841a-4868-11e1-9826-a4b197fffe70")
Generating curl commands for testing
8) Retrieve curlgen.rb, in rack-mauth git repo, under test/curlgen.rb
this is currently just in mikes branch i think - feature/curl_gen_script
https://github.com/mdsol/rack-mauth/blob/feature/curl_gen_script/test/curlgen.rb
https://sites.google.com/a/mdsol.com/knowledgebase/home/departments/engineering/on-demand-portfolio/services/core-services/mauth/rack-mauth
9) curlgen script takes in a yaml file that stores specific api request parameters
10) Create a new yaml file, ensure it has the following format:
      :private_key_str: | 
               <multi line private key for the app that is making the call>
      :app_uuid: <uuid of app making the api call> 
      :host: <host, include http://>
      :url: <api url path>
      :verb: <http method used, GET, POST, etc>
      :post_data: <if using POST, enter post data here>
9) Need to generate a new curl command every 5 minutes or so, otherwise the MAuth tokens will expire
10) Ensure your using the latest mauth-signer
    
Here is documentation. Not sure what hasn't been mention on knowledge base so not sure if I need to say anything else.

Thanks,
Mike W


here is curl gen script - as of 2/9
#!/usr/bin/ruby 

# HOW TO USE
# ruby curl_script.rb <curl_config_file>
# 
#puts simple_request('https://mauth-sandbox.imedidata.net', '/mauth/v1/security_tokens/')
#puts simple_request('http://localhost:3000', '/mauth/v1/security_tokens/')
#puts simple_request('http://localhost:4004', '/mauth/v1/security_tokens/', 'POST', 'foo=bar')
#puts simple_request('http://localhost:9292', '/')

require 'rubygems'
require 'bundler/setup'
require 'mauth_signer'

class CurlGenerator
  attr_accessor :private_key_str, :app_uuid

  def initialize(private_key_str, app_uuid)
    self.private_key_str = private_key_str
    self.app_uuid = app_uuid
  end

  def generate_url(base_url, path)
    "#{base_url}#{path}"
  end

  def simple_request(base_url, path, verb='GET', post_data='')
    headers = MAuth::Signer.new(:private_key => self.private_key_str).
                            signed_request_headers(:app_uuid => self.app_uuid,
                             :request_url => path, :post_data => post_data, :verb => verb)

    args = headers.map{|k,v| "-H '#{k}: #{v}'"} * ' '
    curl_command_str = ""
    if post_data == ''
      curl_command_str = "curl -v #{args} #{generate_url(base_url, path)}"
    else
      curl_command_str = "curl -v #{args} -d '#{post_data}' #{generate_url(base_url, path)}"
    end

    response_hash = {:headers => headers.inspect,
                     :curl_command => curl_command_str
                    }
    response_hash
  end
end

if ARGV.count != 1
  puts "Usage: ./curlgen.rb <curl-config-file>"
  return
end

argument_file = ARGV[0]
arguments = YAML.load_file(argument_file)
private_key_str = arguments[:private_key_str]
app_uuid        = arguments[:app_uuid]
base_url        = arguments[:base_url]
path            = arguments[:path]
verb            = arguments[:verb]
post_data       = arguments[:post_data] || ''

response_hash = CurlGenerator.new(private_key_str, app_uuid).simple_request(base_url, path, verb, post_data)
puts "HEADERS: #{response_hash[:headers].inspect}"
puts private_key_str
puts base_url 
puts path
puts app_uuid
puts verb
puts response_hash[:curl_command]